Singleton pattern

----DESCRIPTION----
Singleton is design pattern which ensures that there is only one instance of a class and it gives global access
point to that instance.

----PROBLEM(S)----
Regular constructor ALWAYS returns NEWLY created object(allocates memory).
If we want to use object for the same thing in whole project there is no need to create new object every time.
Question is how to create ONLY ONE object of a class and use it ANYWHERE there is need.

----SOLUTION----
In singleton design there are two steps:
	1) Create class (this will be singleton class) that has private default constructor to prevent calling new
	   operator with that class (to prevent creation of new instances)
	2) Create class atribute where object instance will be stored
	3) Create static method that will act like constructor(it will call class constructor) and store created object
	   in class atribute created in step 2). Every time static method is called it will check if atribute is empty and
	   if it is empty it will call constructor and if atribute is not empty it will return atribute (class instance)
	4) If application is using multithreading then inside static method thread locking implementation is required (to 
	   ensure that more than one thread can not initilize same object)

In this 3 steps mentioned problems are solved because static method can be called globaly and it will never create more
than one object(instance) of a class.

----WHEN TO USE SINGLETON PATTERN----
There is need for only one instance of a object that is used in different parts of code.
In theory, object are specific instances of a class and logicaly object is used to represent different instances of a 
class. But practicaly we can have a class that has functionality we need but there is no need to have more than one
instance of that class (because we need that class only for specific functionality and not to represent that class in
different ways)

----REFERENCE----
https://refactoring.guru/design-patterns/singleton